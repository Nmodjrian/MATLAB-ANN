   % Import data from spreadsheet
   % Script for importing data from the following spreadsheet:
  Workbook: D:\..\grid_30.xlsx
  Worksheet: grid_30
   Auto-generated by MATLAB on 19-Aug-2022 13:17:36
   % Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 15);

   % Specify sheet and range
opts.Sheet = "grid_30";
opts.DataRange = "A2:O198311";

   % Specify column names and types
opts.VariableNames = ["OID_", "MRT", "LST", "DEM", "DSMb", "CDSM", "SVF", "NDVI", "NDBI", "BSF", "Mean_Heigh", "Road_ratio", "Vege_Ratio", "PM10", "NOx"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

   % Import the data
grid308 = readtable("D:\..b\grid_30.xlsx", opts, "UseExcel", false)

grid308 = sortrows(grid30,'OID_')

   % Clear temporary variables
clear opts

   % Table for training
data= grid30(:, 2:15);
x= data(:, 3:14)
%y=lst
y= data(:, 2)


dataA= table2array(data)
corrco=corrcoef(dataA)


%filenameCorrdataA = 'final_corrcoef.xlsx';
%writematrix(corrco,filenameCorrdataA,'Sheet',1)

   %Normalization and ready for partition  LST
xt= table2array(x); 
yt= table2array(y); 


maxLST=max(yt)
minLST=min(yt)
meanLST=mean(yt)
stdLST=std(yt)
boxplot(yt)



for i=1:12
    xN(:, i) = (xt(:, i)-min(xt(:, i)))/(max(xt(:, i))-min(xt(:, i)));
end
yN= zscore(yt); 

%(yt-min(yt))/(max(yt)-min(yt));
xN
yN
%yyy= (yN*stdLST)+meanLST % formula for retrning the standardized values to
%the real values

   % Visualizing the distribution of data
bins= {'DEM', 'DSM', 'CDSM', 'SVF', 'NDVI', 'NDBI' , 'BSF', 'MeanHeight', 'RAR', 'VSF', 'PM10', 'NOx'};

boxplot(xt, bins)
ylabel('Distribution of Predictors')

   % Visualizing the normalized data
bins= {'DEM', 'DSM', 'CDSM', 'SVF', 'NDVI', 'NDBI' , 'BSF', 'MeanHeight', 'RAR', 'VSF', 'PM10', 'NOx'};

boxplot(xN, bins)
ylabel('Normalized Distribution of Predictors')

   % Partitioning of DATA 
[trInd, teInd] = dividerand(198310,0.8,0.2)
xTrN= xN(trInd, :);
yTrN= yN(trInd, :);
%xValN= xN(valInd, :);
%yValN= yN(valInd, :);
xTeN= xN(teInd, :);
yTeN= yN(teInd, :);

   % Code generated for the neuron=26
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 19-Aug-2022 15:58:36
%
% This script assumes these variables are defined:
%
%   xTrN - input data.
%   yTrN - target data.

p = xTrN';
z = yTrN';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 26;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,p,z);

% Test the Network
ypred = net(p);
e = gsubtract(z,ypred);
performance = perform(net,z,ypred)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

performance=  perform(net,z,ypred)
ypredd = ((net(p)*stdLST)+meanLST)
zp= ((z*stdLST)+meanLST)
MSE1= perform(net, zp, ypredd)
RMSE1= sqrt(MSE1)


RSStr= sum((e.^2))
meanTr= mean(z)
meanTediff= (z-meanTr).^2
TSStr= sum(meanTediff)

RsquareTr= 1-(RSStr/TSStr)
er= e*stdLST
MAEtr= mean(abs(er))
boxplot(ypredd)

pTest= xTeN'
ypTest= (((yTeN')*stdLST)+meanLST)
ypred2= (((net(pTest))*stdLST)+meanLST)

error= ypTest-ypred2
e2= gsubtract(ypTest, ypred2)
performance2 = perform(net,ypTest,ypred2)
RMSE2= sqrt(performance2)


RSSte= sum((error.^2))
meanTe= mean(ypTest)
meanTediff= (ypTest-meanTe).^2
TSSte= sum(meanTediff)

MAEte= mean(abs(error))

RsquareTe= 1-(RSSte/TSSte)

boxplot(ypred2)

histogram2(ypTest, ypred2, 'DisplayStyle','tile')
line([15 36], [15 36], "color", "k")
xlabel("yActual")
ylabel("yPred")
cb= colorbar();


